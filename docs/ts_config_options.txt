TypeScript Configuration Options

Let's break them down the ts options here and explain them one by one.

“incremental”: true: This option tells the TypeScript compiler to construct and save an incremental compilation information file (.tsbuildinfo) which contains the dependencies and output of the files from the previous compilation. This helps the compiler to determine the smallest set of files that need to be rechecked and possibly re-emitted on subsequent compilations, which can greatly improve subsequent compile times.
“target”: “es2016”: The target option controls which ECMAScript version TypeScript will output during the transpilation process. Setting it to “es2016” means the output will be ES2016 JavaScript. TypeScript will ensure that the code you write is compatible with ES2016 environments, and will transform any newer ECMAScript features you used into their ES2016 equivalents.
“experimentalDecorators”: true: This enables experimental support for decorators, an upcoming ECMAScript feature. Decorators allow a form of meta-programming and can be used to modify or annotate classes, properties, methods, and parameters. They are an experimental feature that TypeScript chooses to support due to their powerful capabilities.
“emitDecoratorMetadata”: true: When this setting is enabled, TypeScript will emit additional metadata for decorated declarations within the generated JavaScript. This metadata might include the design:type, design:paramtypes and design:returntype, which reflect the type information of a class, parameters and return type of methods respectively. This information is used by some libraries, most notably Angular.
“module”: “commonjs”: The module option tells TypeScript which module system to use when emitting the JavaScript code. CommonJS is a module system designed for server-side JavaScript and is the default in Node.js. It uses require and module.exports to import and export modules, respectively.
“moduleResolution”: “node”: This setting dictates how module imports are resolved. Node.js-style resolution mimics the Node.js runtime’s strategy of resolving modules – looking in the nearest node_modules directory up the directory tree. The alternative, “classic,” was used in earlier versions of TypeScript, but is generally only used in certain edge cases.
“baseUrl”: “.”: This option is used to specify the base directory relative to which non-relative module imports will be resolved. If a non-relative path is used to import a module, TypeScript will assume that module is located relative to the baseUrl.
“resolveJsonModule”: true: This option allows the import of JSON modules from a TypeScript file. This can be useful when you need to include JSON configuration files or other data in your application. The imported JSON module will be assigned the type any.
“outDir”: “./dist”: The outDir option tells TypeScript where to place the output JavaScript files after transpilation. The value “./dist” means TypeScript will put the transpiled JavaScript files in a directory named “dist” located in the same directory as the tsconfig.json file.
“esModuleInterop”: true: This setting controls the generation of additional helper code in the emitted JavaScript to enable more compatible interop between CommonJS and ES Modules. With this enabled, you can use default imports syntax with modules that do not have a default export.
“forceConsistentCasingInFileNames”: true: This option ensures that the casing of filenames is consistent to avoid issues on case-sensitive operating systems. Inconsistent casing can cause problems because some operating systems (like Unix-based systems) treat filenames as case-sensitive, while others (like Windows) do not.
“strict”: true: This option enables a wide range of strict type-checking behavior. When set to true, it enables all the strict type checking options listed below, which help you to write safer code by checking more strictly for common errors.
“noImplicitAny”: true: When TypeScript cannot infer the type of a variable, function parameter, returned function value, or object property, it defaults to the type any. This option prevents the use of the implicit any type and requires a type to be specified in these cases.
“strictNullChecks”: true: In JavaScript, null and undefined are valid values. This option, when set to true, makes TypeScript more strict by disallowing null and undefined to be assigned to a variable unless explicitly declared in the type.
“strictFunctionTypes”: true: This option makes the type-checking of functions more strict. When it is enabled, function parameters are checked more strictly to ensure the function is not invoked with arguments that the original function’s parameters did not declare.
“strictBindCallApply”: true: In JavaScript, the functions bind, call, and apply are loosely typed. When this option is true, TypeScript will check that these methods are invoked with the correct argument types.
“strictPropertyInitialization”: true: This option ensures that all instance properties of a class are initialized in the constructor. If a property is not initialized in the constructor, TypeScript will raise an error, unless the property is explicitly marked as potentially undefined.
“noImplicitThis”: true: The value of this in JavaScript is determined by the context in which a function is called. When this option is true, TypeScript will raise an error when this is used in a context where its type cannot be inferred.
“alwaysStrict”: true: This option enforces that JavaScript code is parsed in strict mode, and "use strict"; is added to the top of each output JavaScript file. Strict mode makes several changes to normal JavaScript semantics, such as preventing the use of undeclared variables.
“noUnusedLocals”: true: This option raises an error when a variable is declared but never used. This helps to keep the codebase clean and free of unnecessary code.
“noUnusedParameters”: true: This option raises an error when a function parameter is declared but never used. Like noUnusedLocals, this helps to keep the codebase clean.
“noImplicitReturns”: true: This option ensures that not all code paths in a function return a value. If some path in a function does not return a value, TypeScript will raise an error.
“noFallthroughCasesInSwitch”: true: In JavaScript, if a case in a switch statement does not end with a break, it will “fall through” to the next case. This option raises an error for these fallthrough cases, which are often mistakes.
“skipLibCheck”: true: By default, TypeScript includes type-checking of declaration files (.d.ts files) in its compilation process. This option tells TypeScript to skip type-checking of all declaration files.
Each of these options provides a way to customize TypeScript to fit your specific project’s needs and can help catch common bugs before they make it into the final JavaScript output.